Routing
=======

Base URL
--------

In Open Orchestra, the base url of a website is composed by the domain and possibly a language prefix.
To manage all the possibilities, Open Orchestra associates each website in the database with website aliases which contain:

* **domain**: domain name
* **language prefix**: used by Open Orchestra to define the language
* **scheme** : to choose with which protocol page can be accessed

Here is an example of some base URL generated for a website associate to two domains: ``dev.example.com`` and ``test.example.com``,
each of them, with english as default language and french as secondary one.

+----------+--------+------------------+----------+-----------------+-----------------------------+
| Alias Id | Scheme | Domain           | Language | Language prefix | Base URL                    |
+==========+========+==================+==========+=================+=============================+
| 0        | http   | dev.example.com  | fr       | fr              | http://dev.example.com/fr   |
+----------+--------+------------------+----------+-----------------+-----------------------------+
| 1        | http   | dev.example.com  | en       | none            | http://dev.example.com      |
+----------+--------+------------------+----------+-----------------+-----------------------------+
| 2        | http   | test.example.com | fr       | fr              | http://test.example.com/fr  |
+----------+--------+------------------+----------+-----------------+-----------------------------+
| 3        | https  | test.example.com | en       | none            | https://test.example.com    |
+----------+--------+------------------+----------+-----------------+-----------------------------+


URL Pattern
-----------

The url pattern is added to the ``base URL`` to generate the url.
For a node, the url pattern can be chosen by the contributor or is generated automatically from the page title.

It uses Symfony rules :

* Variables to extract between {}, ex : `/exemple/{param}/test`
* Pattern have to be unique

See the ``Url pattern`` chapter from `Node Configuration`_ for more details.

Redirection
-----------

Open Orchestra allows users to determine redirection in the back office.
The redirection form contains some arguments:

* **site name**: contextual site which triggers the redirection
* **site language**: contextual language which triggers the redirection
* **pattern to redirect**: pattern that will be the URL of the redirection
* **node where the redirection is headed**: redirect to a node
* **Url to redirect to**: redirect to url if node is not specify
* **permanent redirection**: Use to adapt response code

Exemple:

+-------------------+----------+---------------------+------+-------------------------------+
| Base Site         | Language | Pattern to redirect | Node | URL to redirect               |
+===================+==========+=====================+======+===============================+
| http://example.fr | english  | oo                  | none | http://www.open-orchestra.com |
+-------------------+----------+---------------------+------+-------------------------------+
| http://example.fr | french   | open-orchestra      | HOME | none                          |
+-------------------+----------+---------------------+------+-------------------------------+

If a user come on ``http://example.fr/oo`` so the english site with the good pattern,
it will be redirect to the ``http://www.open-orchestra.com`` website.

If a user come on ``http://example.fr/fr/open-orchestra`` so the french site with the good pattern,
it will be redirect to the ``HOME`` node of the french page.

But if a user come on ``http://example.fr/fr/oo``, it will have a 404 page not found error because redirections are attached to languages.

Implementation
--------------

``open-orchestra-front-bundle`` contains all the routing related classes in the ``routing`` folder.


Route Loader
~~~~~~~~~~~~

In Open Orchestra, route collections are extracted from the nodes by some classes:

* ``DatabaseRouteLoader`` generates routes for different nodes.
Routes generated are linked to the ``NodeController`` and have languages, node, site and alias as parameters.
Route name is generated by two id : ``AliasID_NodeId``.

* ``RedirectionLoader`` generates routes for different redirections.
Routes are linked to the redirect controller from the frameworkBundle.
Route name is generated by two id : ``AliasID_RedirectionID``.

Declaring differents loaders as services in ``routing.yml`` is mandatory to generate different routes.

.. code-block:: yaml

    open_orchestra_database:
        resource: '.'
        type: database

    open_orchestra_redirection:
        resource: '.'
        type: orchestra_redirection

See `Symfony Loader documentation`_ for more information.

URL Generator
~~~~~~~~~~~~~

``OpenOrchestraUrlGenerator`` generates URLs from routes.
The URL Generator is overriden to take `RequestStack`_ in argument and get the ``aliasId`` from it.
It will be used to adapt this route name with route names generated by Open Orchestra ``Route Loader``.

Generator dumper
~~~~~~~~~~~~~~~~

``OpenOrchestraGeneratorDumper`` extends ``PhpGeneratorDumper``, it will dump the routing in the Symfony cache
file to avoid any request to the database.

Router
~~~~~~

``OpenOrchestraRouter`` extends ``Symfony\Bundle\FrameworkBundle\Routing\Router`` to add the ``RequestStack``
in the OpenOrchestraUrlGenerator constructor.

.. _Node Configuration: /en/user_guide/node_configuration.rst
.. _Symfony Loader documentation: http://symfony.com/doc/current/cookbook/routing/custom_route_loader.html
.. _RequestStack: http://symfony.com/blog/new-in-symfony-2-4-the-request-stack
